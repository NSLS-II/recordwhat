from recordwhat.parsers.dbd_parsimonious import (
    dbd_grammar, dbdField, dbdRecordType, RecordWalker,
    stream_dbd, generate_all)
from recordwhat.util import read_file
from collections import OrderedDict
import pytest
from tempfile import NamedTemporaryFile
import os.path


@pytest.fixture
def test_rec():
    fields = OrderedDict()
    for pg in ('AA', 'BB'):
        for j in range(5):
            nm = '{}{}'.format(pg, j)
            fields[nm] = dbdField(
                nm,
                'DBF_CHAR',
                prompt='"test p {}"'.format(j),
                promptgroup='"{}"'.format(pg))

    return dbdRecordType(name='test',
                         fields=fields)


def test_round_trip(test_rec):
    rec = test_rec
    dbd_str = '\n'.join(stream_dbd(rec))

    with NamedTemporaryFile(suffix='.dbd', mode='wt',
                            encoding='utf-8') as f1, \
        NamedTemporaryFile(suffix='.dbd', mode='wt',
                           encoding='utf-8') as f2:
        f1.write(dbd_str)
        fn = os.path.basename(f1.name)
        f2.write('include "{}"'.format(fn))
        f1.flush()
        f2.flush()
        test_str = read_file(f2.name)

    p = dbd_grammar.parse(test_str)

    rec2 = RecordWalker().visit(p)

    assert rec == rec2['test']


_target_code = """\
from ophyd import (EpicsSignal, EpicsSignalRO)

from recordwhat import (RecordBase, _register_record_type,
                        FieldComponent as Cpt)


@_register_record_type('test')
class TestRecord(RecordBase):
    'Autogenerated class'

    # - "aa"
    test_p_0 = Cpt(EpicsSignal, '.AA0')
    test_p_1 = Cpt(EpicsSignal, '.AA1')
    test_p_2 = Cpt(EpicsSignal, '.AA2')
    test_p_3 = Cpt(EpicsSignal, '.AA3')
    test_p_4 = Cpt(EpicsSignal, '.AA4')

    # - "bb"
    test_p_0_bb0 = Cpt(EpicsSignal, '.BB0')
    test_p_1_bb1 = Cpt(EpicsSignal, '.BB1')
    test_p_2_bb2 = Cpt(EpicsSignal, '.BB2')
    test_p_3_bb3 = Cpt(EpicsSignal, '.BB3')
    test_p_4_bb4 = Cpt(EpicsSignal, '.BB4')"""


def test_python_gen(test_rec):
    code = '\n'.join(generate_all([test_rec]))
    assert code == _target_code
